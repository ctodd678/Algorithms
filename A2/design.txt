Feb22nd, 2020
Connor Todd (1039174)
CIS*3490
Assignment 2

DESIGN

P1.1)

ALGORITHM
//Count inversions via brute force of an array of n integers
//Input: Array i [0..n - 1] of n integers
		 Array j [0..m – 1] of m integers
//Output: number of inversions
For i <- 0 to n – 1 do
	For j <- i  to n – 1 do
		if A[j] < A[i]
		inversions = inversions + 1


P1.2)

ALGORITHM (mergesort to count inversions)
//Sorts Array and counts inversions via method of mergesort
//Input: Array A[0...n - 1] of n integers, left and right (left and right being the left and right indexes of array)
//Output: Number of inversions in array A 
        if left < right
        mid <- (left + right) / 2
        inversions = inversions + mergesort(A, left, mid)
        inversions = inversions + mergesort(A, mid + 1, right)
        merge(A, left, mid + 1, right)

ALGORITHM (merge for mergesort)
Merges sorted arrays and counts inversions
//Input: Array A, left, mid and right (left and right being the left and 
right indexes of array and mid is the middle number of array) 
tempMid and tempLeft are set to mid and left
//Output: Number of versions in array A
        while mid > tempLeft and tempMid <= right do
            if A[tempLeft] <= A[tempMid]
                tempArray[i] = A[tempLeft]
                tempLeft = tempLeft + 1
            else
                tempArray[i] = A[tempMid]
                tempMid = tempMid++
                inversions = inversions + mid
                inversions = inversions - tempLeft

        if mid > tempLeft
            for j <- tempLeft to mid do
                tempArray[i] = A[j]
                i = i + 1
        else
            for j <- tempMid to right do
                tempArray[i] = A[j]
                i = i + 1
        
        for j <- left to right do
                A[j] = tempArray[j]
                j = j + 1

MASTER THEOREM:

T(n) 
= 2T * (n/2) + O(n)
= a * T(n/b) + f(n)
T(1) = c

if f(n) = O(n^d), d>=0 then
T(n) ={
    O(n^d)
    O(n^d * logn) < -
    O(n^(logb^a))
}
T(n) = )(nlogn)



1.3)
Implemented in c program.
The bruteforce algorithm takes much longer than the divide and conquer. I averaged around
4.5 seconds for the brute force and 0.02 seconds for the divide and conquer. This is
expected as the divide and conquer is a much more efficient algorithm.


        

P2.1)
ALGORITHM (brute force convex hull)
//Gets the convex hull of a set of coordinate pairs
//Input:    -Array A[0..n-1] of coordinate pairs (array of Point stucts) (a struct with 2 doubles)
            -Int   MAXPOINTS which is the max number of coordinate pairs
//Output:   -Array con[0..n-1] (sorted) of coordinate pairs on the convex hull (convexHull)
    for i <- 0 to to MAXPOINTS do
        for k <- 0 to MAXPOINTS do
            if i != j
                a = y2 - y1
                b = x1 -x2
                c = (x1 * y2) - (y1 * x2)
                hull1 = 0
                hull2 = 0
                hull3 = 0 
                for k <- 0 to MAXPOINTS do
                    if k != i and k != j
                        tempC = (a * A[k].x) + (b * A[k].y) - c
                    
                    if tempC < 0.0
                        hull = 1
                    else if tempC > 0.0
                        hull2 = 1
                    else
                        hull3 = 1
                    
                    if hull1 > 0 and hull2 > 0
                        break loop
                
                if hull1 = 1 and hull2 = 0 OR hull2 =1 and hull1 = 0
                    if hull3 != 1
                        add Point in array j to convexHull
                        ext = ext + 1
                        add Point in array i to convexHull
                        ext = ext + 1
    for i <- 0 to ext do
        con[i] = convexHull[i]
    
    qsort(con)
    print(con)    


P2.2)
ALGORITHM (quick sort convex hull)
//Input:    -Array P[0..n-1] of coordinate pairs (array of Point stucts) (a struct with 2 doubles)
            -Int   minX which is the lowest X coordinate
            -Int   maxX which is the highest X coordinate
//Output:   -Array con[0..n-1] (sorted) of coordinate pairs on the convex hull (convexHull)
//CALL QUICK SORT ON EACH SIDE
    quicksort(P, P[minX], P[maxX], 1);  
    quicksort(P, P[minX], P[maxX], -1);

    for i <- 0 to ext do
        con[i] = convexHull[i]
    
    qsort(con)
    print(con)  

ALGORITHM (quicksort)
//Input:    -Array P[0..n-1] of coordinate pairs (array of Point stucts) (a struct with 2 doubles)
            -Point   pLeft which is the left Point
            -Point   pRight which is the right Point
            -Int     s    which is the side
//Output:   -Array con[0..n-1] (sorted) of coordinate pairs on the convex hull (convexHull)

    quicksort(P, P[minX], P[maxX], 1);  
    quicksort(P, P[minX], P[maxX], -1);

    for i <- 0 to MAXPOINTS do
        temp = |((p[i].y - pLeft.y) * (pRight.x - pLeft.x) - (pRight.y - pLeft.y) * (p[i].x - pLeft.x))|

        side = getSide()
            
        if(side == s && temp > maxLength){ 
            hull = i
            maxLength = temp
        }
    
    if hull = -1
        add left Point to hull
        add right Point to hull
    
    side = getSide()
    quicksort(P, P[hull], pLeft, -side)
    side = getSide()
    quicksort(P, P[hull], pRight, -side)

    qsort(con)
    print(con)  

2.3)
Implemented in c program.
The bruteforce algorithm for the convex hull took around 25 seconds on average when testing.
Meanwhile the quicksort convex hull alogrithm took around 0.01 seconds on average when testing.
This is expected as the quicksort convex hull has a much better efficiency.


   
